<?php

/**
 * @file
 * Enabling SMS from your website via CallFire.com
 *
 * @creation November 2012
 * @author Rod Jackson (RDJ)
 */
 

//require_once("tm_sms.notify.inc");

define('TM_SMS_SIGNUP_PROMPT_SETTING', "Please choose which text messaging features you would like to receive.");
define('TM_SMS_DEFAULT_SHIP_MESSAGE', "!name, your !org order (for !total) has shipped. Your tracking number is !track");
define('TM_SMS_DEFAULT_NO_NEW_PUBLIC_SENDS_MESSAGE', "Sorry, there have been no recent promos or info texts sent out. Check again soon!");
define('TM_SMS_DEFAULT_HELP_MESSAGE', "Text NEW for the latest info or promo, SIGNUP to signup for an opt-in texting feature, or STOP to cancel an opt-in feature (STOP ALL to cancel all.)");


/**
 * Includes all the files for included and external feature functions
 */
// CODE BLOCK: _include_all_tm_sms_files

	// get the features
	$all_features = tm_sms_all_features();
	
	// get the callback filenames of enabled features
	$feature_fns = array();
	foreach ($all_features as $current_feature) {
		if ($current_feature['enabled']) {
			$feature_fns[] = $current_feature['filename'];
		}
	}
	
	// get rid of duplicate filenames
	$feature_fns = array_unique($feature_fns);
	
	// require each file once
	foreach ($feature_fns as $feature_filename) {
		require_once($feature_filename);
	}
// end code block - _include_all_tm_sms_files



/**
 * Settings form for the TeleMo SMS module.
 */
function tm_sms_settings() {

	$form = array();

	$form['general'] = array(
		'#type' => 'fieldset',
		'#title' => t('General SMS settings'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
	);

	/*$form['general']['tm_sms_enabled'] = array(
		'#type' => 'radios',
		'#title' => t('Debug mode activation'),
		'#options' => array(
			0 => t('SMS services are disabled.'),
			1 => t('SMS services are available.')
		),
		'#default_value' => variable_get('tm_sms_enabled', 0),
    '#summary' => variable_get('tm_sms_enabled' ,0) ?
			t('SMS services are DISABLED.') :
			t('SMS services are ENABLED.'),
		//'#description' => t('This allows restricting SMS signup to only site administrators, primarily for testing and/or debugging purposes.'),
	);*/
	$form['general']['tm_sms_org_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Organization name'),
		'#default_value' => variable_get('tm_sms_org_name', ''),
    '#summary' => t('Organization name is currently set as: <br /> %org', array('%org' => variable_get('tm_sms_org_name', ''))),
		'#description' =>
			t("A short name of the organization (business, website, club, etc.) sending the SMS messages."),
	);
	$form['general']['tm_sms_signup_message'] = array(
		'#type' => 'textarea',
		'#rows' => 3,
		'#resizable' => FALSE,
		'#title' => t('SMS signup message'),
		'#default_value' => variable_get('tm_sms_signup_message', TM_SMS_SIGNUP_PROMPT_SETTING),
		'#summary' => t('Current message to use to prompt users to sign up for SMS features:') .
			'<br />' . variable_get('tm_sms_signup_message', TM_SMS_SIGNUP_PROMPT_SETTING),
		'#description' =>
			t('Message to display to prompt users to sign up for SMS features.'),
	);

	$form['features'] = array(
		'#type' => 'fieldset',
		'#title' => t('Individual SMS feature settings'),
		'#collapsible' => TRUE,
		'#collapsed' => TRUE,
	);

	$feature_settings = tm_sms_feature_settings();
	
	foreach ($feature_settings as $key => $feature_setting) {
		$form['features'][$key] = $feature_setting;
	}

	return $form;
	
} // end function - tm_sms_settings


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function tm_sms_help($path, $arg) {
	$o = '';  // declare your output variable
	switch ($path) {
		case "admin/help#tm_sms":
			$o .= '<p>'. 
				t('Implements sending and receiving SMS texts.') .'</p>';
			break;
	}
	return $o;
}


/**
 * Let the main TeleMo module know this service (SMS) is here
 */
function tm_sms_telemo_service() {

	$services = array();
	
	$services[] = array(
		'id' => 'sms',
		'name' => t('TeleMo SMS'),
		'desc' => t('Enables the sending and receiving of SMS messages.'),
		'text' => t('Enables the sending and receiving of SMS messages.'),
		'callback' => 'tm_sms_settings',
		'enabled' => variable_get('tm_sms_enabled', FALSE),
		'prompt' => array(
			'#type' => 'item',
			'#value' => variable_get('tm_sms_signup_message', TM_SMS_SIGNUP_PROMPT_SETTING),
		),
		'settings' => tm_sms_settings(),
		'features' => tm_sms_all_features(),
		'weight' => -10,
	);

	return $services;
}


/**
 * Identifies and handles TeleMo postbacks/notifications of incoming SMS service messages
 */
function tm_sms_telemo_notify($xml, $carrier) {

	$ret = NULL;
	$continue = TRUE;
	
	if (variable_get('tm_sms_enabled', 0) && $xml) {
	
		switch ($carrier) {
		
			case 'callfire':
			
				// check to make sure this is an SMS notification we can respond to
				$text = $xml->Text;
				if (!$text) {
					$ret = 'Error: no text found';
					$continue = FALSE;
				}
				
				if ($continue) {
					$from = (string)$text->FromNumber;
					if (!$from) {
						$ret = 'Error: no source number found';
						$continue = FALSE;
					}
				}
				
				if ($continue) {
					$inbound = (((boolean)$text->Inbound) == TRUE);
					if (!$inbound) {
						$ret = 'Error: not an inbound text';
						$continue = FALSE;
					}
				}

				if ($continue) {
					$message = strtoupper((string)$text->Message);
					$words = _tm_sms_text_to_words($message);
					if ((!is_array($words)) || (count($words) < 1)) {
						$ret = 'Error: no usable message in text';
						$continue = FALSE;
					}
				}

				if ($continue) {
					$to = (string)$text->ToNumber;
				}
				
				break;
				
			case 'twilio':
			
				// check to make sure this is an SMS notification we can respond to
				$text = $xml->Body;
				$from = (string)$xml->From;
				if (!$text) {
					$ret = 'Error: no text found';
					$continue = FALSE;
				}

				if (!$from) {
					$ret = 'Error: no source number found';
					$continue = FALSE;
				}

				if ($continue) {
					$message = strtoupper((string)$text);
					$words = _tm_sms_text_to_words($message);
					if ((!is_array($words)) || (count($words) < 1)) {
						$ret = 'Error: no usable message in text';
						$continue = FALSE;
					}
				}
		
				if ($continue) {
					$to = (string)$xml->To;
				}
				
				break;
				
			default:
		
		}
		
		// at this point, we have a usable SMS, and a usable list
		// of words in the SMS. The first is always the keyword,
		// an indicator of what response feature to activate, with
		// the remaining words being parameters for the feature
		if ($continue) {
			$keyword = $words[0];
			unset($words[0]);
		
			// get all features
			$features = array_reverse(_tm_sms_all_features());
			
			foreach ($features as $feature) {
				// don't even bother if the feature isn't an enabled, non-opt-in feature
				if ($feature['enabled'] && !$feature['optin']) {
					// check to see if the keyword matches
					$codewords = $feature['codewords'];
					if (!is_array($codewords)) {
						$match = ($codewords == $keyword);
					}
					else {
						$match = FALSE;
						foreach ($codewords as $codeword) {
							if ($codeword == $keyword) {
								$match = TRUE;
								break;
							}
						}
					}
					// if the feature matches the keyword, execute the feature
					if ($match) {
						$funcname = 'tm_sms_feature_' . $feature['id'];
						$ret = call_user_func($funcname, $from, $to, $words);
						break;
					}
				} // end of check to see if this feature is enabled
			} // end of loop through all response features
		
		} // end of last $continue check for a usable SMS notification

	} // end of check if SMS service is enabled & $xml is valid
	
	// while we're here, do the next scheduled sends
	telemo_execute_next_scheduled_sends();

	return $ret;
} // end function - ts_sms_telemo_notify


/**
 * Returns all the features for the TeleMo SMS service,
 * so they can be enabled or disabled from the main settings
 */
function tm_sms_feature_settings() {

	$settings = array();
	
	$features = tm_sms_all_features();
	
	foreach ($features as $feature) {
		$feature_id = $feature['id'];
		$feature_id_long = 'tm_sms_feature_' . $feature_id;
		$feature_id_enabled = $feature_id_long . '_enabled';
		$optin = $feature['optin'] ? 'opt-in' : 'response';
		$settings[$feature_id_long] = array(
			'#type' => 'fieldset',
			'#title' => t('!id feature settings (!optin)', array('!id' => strtoupper($feature_id), '!optin' => $optin)),
			'#collapsible' => FALSE,
			'#collapsed' => FALSE,
		);
		$settings[$feature_id_long][$feature_id_enabled] = array(
			'#type' => 'checkbox',
			'#title' => 'Enable <strong>' . strtoupper($feature['id']) . '</strong>: ' . $feature['text'],
			'#default_value' => $feature['enabled'],
		);
		foreach ($feature['settings'] as $setting_name => $setting) {
			$full_setting_name = $feature_id_long . '_' . $setting_name;
			$settings[$feature_id_long][$full_setting_name] = $setting;
		}
	}
		
	return $settings;
	
} // end function - tm_sms_feature_settings


/**
 * Gather all the TeleMo SMS features, including new externally-
 * created ones, by invoking all the hooks for them
 */
function tm_sms_all_features() {

	$features = module_invoke_all('ts_sms_features');
	
	return $features;
}


/**
 * Return the default, built-in features as an array
 */
function ts_sms_ts_sms_features() {

	$features = array();
	
	// Ship Notification: send user an SMS when their order ships
	$features[] = array(
		'id' => 'ship',
		'name' => 'Shipment notification',
		'text' => 'Receive an SMS whenever your order ships.',
		'filename' => 'tm_sms.features.inc',
		'enabled' => variable_get('tm_sms_feature_ship_enabled', FALSE),
		'optin' => TRUE,
		'settings' => array(
			'message' => array(
				'#type' => 'textarea',
				'#rows' => 3,
				'#resizable' => FALSE,
				'#title' => t('Shipment notification message'),
				'#default_value' => variable_get('tm_sms_feature_ship_message', TM_SMS_DEFAULT_SHIP_MESSAGE),
				'#description' => t('Message to send the customer when their order ships. You can use the special variables !name, !order, !total, !carrier, !track and/or !org to reference the customer first name, order number, total order cost, carrier (UPS, etc.), or tracking number, or the short name of the store/website/organization sending the text message.'),
			),
		),
	);
	
	// General Promotions: send user an SMS whenever any sort of promotion is announced
	$features[] = array(
		'id' => 'promos',
		'name' => 'Promotions signup',
		'text' => 'Receive an SMS whenever any promotion is announced.',
		'filename' => 'tm_sms.features.inc',
		'enabled' => variable_get('tm_sms_feature_promos_enabled', FALSE),
		'optin' => TRUE,
		'settings' => array(),
	);
	
	// General Info: send user an SMS when any general site information is released
	$features[] = array(
		'id' => 'info',
		'name' => 'Info signup',
		'text' => 'Receive an SMS whenever any general site info is released.',
		'filename' => 'tm_sms.features.inc',
		'enabled' => variable_get('tm_sms_feature_info_enabled', FALSE),
		'optin' => TRUE,
		'settings' => array(),
	);
	
	// STOP: user sends this to stop receiving an SMS features, or all features
	/*$features[] = array(
		'id' => 'stop',
		'name' => 'Stop SMS sends',
		'text' => 'Stops either the latest SMS feature sent to the user, or all of them.',
		'filename' => 'cf_sms.response.inc',
		'codewords' => array('STOP'),
		'enabled' => variable_get('cf_sms_response_feature_stop_enabled', FALSE),
		'optin' => FALSE,
		'settings' => array(),
	);*/
	
	// HELP: user sends this to get a helpful SMS (or two) about response features
	$features[] = array(
		'id' => 'help',
		'name' => 'Get SMS help',
		'text' => 'Replies with an SMS with details on using the features or getting more info.',
		'filename' => 'tm_sms.features.inc',
		'codewords' => array('HELP', '?'),
		'enabled' => variable_get('tm_sms_feature_help_enabled', FALSE),
		'optin' => FALSE,
		'settings' => array(
			'message' => array(
				'#type' => 'textarea',
				'#rows' => 3,
				'#size' => 160,
				'#resizable' => FALSE,
				'#title' => t('Help response message'),
				'#default_value' => variable_get('tm_sms_feature_help_message', TM_SMS_DEFAULT_HELP_MESSAGE),
				'#description' => t("Message to send the customer when they text 'HELP' to our system."),
			),
		),
	);
	
	// NEW: user sends this to get a copy of the latest promo or info SMS
	$features[] = array(
		'id' => 'new',
		'name' => 'Receive newest SMS',
		'text' => 'Replies with an SMS of the latest promo or info without signing up.',
		'filename' => 'tm_sms.features.inc',
		'codewords' => array('NEW', 'NEWEST', 'LATEST'),
		'enabled' => variable_get('tm_sms_feature_new_enabled', FALSE),
		'optin' => FALSE,
		'settings' => array(
			'time_limit' => array(
				'#type' => 'textfield',
				'#title' => t('Maximum age of info/promo'),
				'#default_value' => variable_get('tm_sms_feature_new_time_limit', 13),
				'#description' => t("Maximum number of days to search for the most recent promo or info broadcast."),
			),
			'message' => array(
				'#type' => 'textarea',
				'#rows' => 3,
				'#size' => 160,
				'#resizable' => FALSE,
				'#title' => t('No new info/promo message'),
				'#default_value' => variable_get('tm_sms_feature_new_message', TM_SMS_DEFAULT_NO_NEW_PUBLIC_SENDS_MESSAGE),
				'#description' => t("Message to send the customer when there have been no promo or info broadcasts within the set time limit."),
			),
		),
	);
	
	// DAMAGE: user sends this to report a damaged shipment
	$features[] = array(
		'id' => 'damage',
		'name' => 'Report damaged shipment',
		'text' => "Reports that the user's latest shipment was damaged, and responds accordingly.",
		'filename' => 'tm_sms.features.inc',
		'codewords' => array('DAMAGE', 'DAMAGED', 'DAMAGES'),
		'enabled' => variable_get('tm_sms_feature_damage_enabled', FALSE),
		'optin' => FALSE,
		'settings' => array(),
	);
	
	// SIGNUP: user sends this to signup remotely for a specific opt-in feature
	$features[] = array(
		'id' => 'signup',
		'name' => 'Signup for feature',
		'text' => "Lets the user signup for a specific opt-in feature remotely.",
		'filename' => 'tm_sms.features.inc',
		'codewords' => array('SIGNUP'),
		'enabled' => variable_get('tm_sms_feature_signup_enabled', FALSE),
		'optin' => FALSE,
		'settings' => array(),
	);

	return $features;

} // end function - tm_sms_tm_sms_features


/**
 * Given a string, breaks the string into individual words,
 * returning an array, each element being a single word
 */
function _tm_sms_text_to_words($text) {

	$separators = " ,;\n\t\r" . chr(27) . chr(0);
	
	$words = array();
	$current_word = '';
	
	for ($i = 0; $i < strlen($text); $i++) {
		$c = $text[$i];
		$pos = strpos($separators, $c);
		if ($pos === FALSE) {
			$current_word .= $c;
		}
		else {
			if (strlen($current_word) > 0) {
				$words[] = $current_word;
				$current_word = '';
			}
		}
	}
	
	if (strlen($current_word) > 0) {
		$words[] = $current_word;
	}
	
	return $words;
}
